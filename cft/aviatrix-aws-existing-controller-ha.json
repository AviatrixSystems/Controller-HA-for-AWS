{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Aviatrix Systems - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance",
  "Metadata" :
  {
    "AWS::CloudFormation::Interface" :
    {
      "ParameterGroups" :
      [
        {
          "Label" : { "default" : "Network Configuration" },
          "Parameters" : [ "VPCParam", "SubnetParam" ]
        },
        {
          "Label" : { "default":"Aviatrix Controller Backup Configuration" },
          "Parameters" : [ "AviatrixTagParam", "CustomAviatrixAppRoleName", "CustomAviatrixEC2RoleName", "S3BucketBackupParam", "AwsAccessKeyParam", "AwsSecretKeyParam", "NotifEmailParam" ]
        }
      ],
      "ParameterLabels" :
      {
         "VPCParam" : { "default" : "Enter VPC of existing controller instance." },
         "SubnetParam" : { "default" : "Enter one or more subnets in different Availability zones within that VPC." },
         "AviatrixTagParam": { "default" : "Enter Name tag of the existing Aviatrix Controller instance." },
         "S3BucketBackupParam": { "default" : "Enter S3 Bucket which will be used to store backup files." },
         "NotifEmailParam": { "default" : "Enter an email to receive notifications for autoscaling group events" },
         "PrivateAccess": { "default" : "Enter True to enable Private IP Access from lambda to the Controller. Please note that you have to attach the Lambda to the VPC subnet and ensure lambda has internet access via EIP/NAT" },
         "CustomAviatrixAppRoleName": {"default" : "Enter the controller IAM APP role name."},
         "CustomAviatrixEC2RoleName": {"default" : "Enter the controller IAM EC2 role name."}
      }
    }
  },
  "Parameters":
  {
    "VPCParam":
      {
        "Type": "AWS::EC2::VPC::Id",
        "Description": "Select Your VPC"
      },
      "SubnetParam":
      {
        "Type": "List<AWS::EC2::Subnet::Id>",
        "Description": "Select multiple Subnets. One of them must be the subnet where the existing controller is deployed on."
      },
      "AviatrixTagParam":
      {
        "Type": "String",
        "Description": "Enter the existing controller instance name. It should contain only letters, numbers, hyphens, or underscores. No spaces allowed"
      },

      "CustomAviatrixAppRoleName":
      {
        "Type": "String",
        "Description": "Enter the controller IAM APP role name if it is different than the default 'aviatrix-role-app'.",
        "Default": "aviatrix-role-app"
      },
      "CustomAviatrixEC2RoleName":
      {
        "Type": "String",
        "Description": "Enter the controller IAM EC2 role name if it is different than the default 'aviatrix-role-ec2'.",
        "Default": "aviatrix-role-ec2"
      },
      "S3BucketBackupParam":
      {
        "Type": "String",
        "Description": "Enter S3 Bucket which will be used to store backup files."
      },
      "NotifEmailParam":
      {
        "Type": "String",
        "Description": "Enter an email to receive notifications for autoscaling group events"
      },
      "PrivateAccess":
      {
        "Type": "String",
        "AllowedValues": [
          "True",
          "False"
        ],
        "Description": "Enter True to enable Private IP Access to the Controller from lambda. Please note that you have to attach the Lambda to the VPC subnet and ensure lambda has internet access via EIP/NAT",
        "Default": "False"
      }
  },
  "Resources" :
  {
    "AviatrixRoleLambda" :
    {
      "Type": "AWS::IAM::Role",
      "Properties" :
      {
        "RoleName": { "Fn::Join" : [ "-", [ { "Ref" : "AviatrixTagParam" }, "role-lambda" ] ] },
        "AssumeRolePolicyDocument":
        {
          "Version" : "2012-10-17",
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal":
              {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path" : "/",
        "Policies": [{
          "PolicyDocument" :
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": "arn:aws:logs:*:*:*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeInstances",
                        "ec2:DescribeInstanceAttribute",
                        "ec2:DescribeAddresses",
                        "ec2:StopInstances",
                        "ec2:RunInstances",
                        "ec2:AssociateAddress",
                        "ec2:DescribeImages",
                        "ec2:DeregisterImage",
                        "ec2:DescribeSnapshots",
                        "ec2:DeleteSnapshot",
                        "ec2:CreateImage",
                        "ec2:CreateSecurityGroup",
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:RevokeSecurityGroupIngress",
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeKeyPairs",
                        "ec2:CreateKeyPair",
                        "ec2:DescribeVolumes",
                        "ec2:ModifyInstanceCreditSpecification",
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DeleteNetworkInterface",
                        "ec2:ModifyInstanceAttribute",
                        "ec2:CreateLaunchTemplate",
                        "ec2:DeleteLaunchTemplate",
                        "ec2:CreateTags",
                        "lambda:UpdateFunctionConfiguration",
                        "lambda:GetFunction",
                        "lambda:GetFunctionConfiguration",
                        "lambda:AddPermission",
                        "autoscaling:CreateLaunchConfiguration",
                        "autoscaling:DeleteLaunchConfiguration",
                        "autoscaling:CreateAutoScalingGroup",
                        "autoscaling:DeleteAutoScalingGroup",
                        "autoscaling:UpdateAutoScalingGroup",
                        "autoscaling:AttachInstances",
                        "autoscaling:DetachInstances",
                        "autoscaling:PutNotificationConfiguration",
                        "autoscaling:DescribeAutoScalingGroups",
                        "autoscaling:UpdateAutoScalingGroup",
                        "sns:CreateTopic",
                        "sns:DeleteTopic",
                        "sns:Subscribe",
                        "sns:Unsubscribe",
                        "sns:ListSubscriptionsByTopic",
                        "ssm:SendCommand",
                        "ssm:ListCommandInvocations",
                        "iam:GetRole",
                        "iam:PassRole",
                        "iam:CreateServiceLinkedRole",
                        "s3:GetBucketLocation",
                        "s3:GetObject",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth"
                    ],
                    "Resource": "*"
                }
            ]
          },
          "PolicyName": { "Fn::Join" : [ "-", [ { "Ref" : "AviatrixTagParam" }, "role-lambda-policy" ] ] }
        }]
      }
    },
    "AviatrixLambda" : {
       "Type" : "AWS::Lambda::Function",
       "Properties" : {
          "Code" : {"S3Bucket" : { "Fn::Join" : [ "-", [ "aviatrix-lambda", { "Ref" : "AWS::Region"}]]}, "S3Key" : "aviatrix_ha.zip"},
          "Environment" : {
            "Variables": {
              "AVIATRIX_TAG" : { "Ref" : "AviatrixTagParam" },
              "AWS_ROLE_APP_NAME" : { "Ref" : "CustomAviatrixAppRoleName" },
              "AWS_ROLE_EC2_NAME" : { "Ref" : "CustomAviatrixEC2RoleName" },
              "SUBNETLIST" : {"Fn::Join": [",", { "Ref": "SubnetParam" }]},
              "S3_BUCKET_BACK" : { "Ref" : "S3BucketBackupParam" },
              "API_PRIVATE_ACCESS" : { "Ref" : "PrivateAccess" },
              "NOTIF_EMAIL" : { "Ref" : "NotifEmailParam" }
            }
          },
          "FunctionName" : { "Fn::Join" : [ "-", [ { "Ref" : "AviatrixTagParam" }, "ha" ] ] },
          "Handler" : "aviatrix_ha.lambda_handler",
          "Role" : {"Fn::GetAtt": [ "AviatrixRoleLambda", "Arn" ]},
          "Runtime" : "python3.8",
          "Timeout" : "900"
       }
    },
    "SetupHA": {
      "Type": "Custom::SetupHA",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["AviatrixLambda", "Arn"] }
      }
    }
  },
  "Outputs" :
  {
    "AccountId" :
    {
      "Description": "Amazon Account ID",
      "Value" : { "Ref" : "AWS::AccountId" }
    },
    "SUBNETLIST" :
    {
      "Description": "SUBNET_LIST",
      "Value" : {"Fn::Join": [",", { "Ref": "SubnetParam" }]}
    }

  }
}
