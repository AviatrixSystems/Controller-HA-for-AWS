{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Aviatrix Systems - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance",
  "Metadata" :
  {
    "AWS::CloudFormation::Interface" :
    {
      "ParameterGroups" :
      [
        {
          "Label" : { "default" : "Network Configuration" },
          "Parameters" : [ "VPCParam", "SubnetParam" ]
        },
        {
          "Label" : { "default":"Lambda function Configuration" },
          "Parameters" : [ "S3BucketParam" ]
        },
        {
          "Label" : { "default":"Aviatrix Controller Backup Configuration" },
          "Parameters" : [ "AviatrixTagParam", "S3BucketBackupParam", "AwsAccessKeyParam", "AwsSecretKeyParam", "AviatrixUserParam", "AviatrixPassParam" ]
        }
      ],
      "ParameterLabels" :
      {
         "VPCParam" : { "default" : "Enter VPC of existing controller instance." },
         "SubnetParam" : { "default" : "Enter one or more subnets in different Availability zones within that VPC." },
         "AviatrixTagParam": { "default" : "Enter Name tag of the existing Aviatrix Controller instance." },
         "S3BucketParam": { "default" : "Enter S3 Bucket name which has aviatrix_ha.zip file." },
         "S3BucketBackupParam": { "default" : "Enter S3 Bucket which will be used to store backup files." },
         "AwsAccessKeyParam": { "default" : "Enter AWS Access Key with permission to access S3 bucket." },
         "AwsSecretKeyParam": { "default" : "Enter AWS Secret Key with permission to access S3 bucket." },
         "AviatrixUserParam": { "default" : "Enter Aviatrix Cloud account username used for backup." },
         "AviatrixPassParam": { "default" : "Enter Aviatrix Cloud account password used for backup." }
      }
    }
  },
  "Parameters":
  {
    "VPCParam":
      {
        "Type": "AWS::EC2::VPC::Id",
        "Description": "Select Your VPC"
      },
      "SubnetParam":
      {
        "Type": "List<AWS::EC2::Subnet::Id>",
        "Description": "Select multiple Subnets. One of them must be the subnet where the existing controller is deployed on."
      },
      "AviatrixTagParam":
      {
        "Type": "String",
        "Description": "Enter the existing controller instance name. Note this instance name must also match the AMI image name created for AWS auto scaling group."
      },
      "S3BucketParam":
      {
        "Type": "String",
        "Description": "Enter S3 Bucket name which has aviatrix_ha.zip file."
      },
      "S3BucketBackupParam":
      {
        "Type": "String",
        "Description": "Enter S3 Bucket which will be used to store backup files."
      },
      "AwsAccessKeyParam":
      {
        "Type": "String",
        "Description": "Enter AWS Access Key with permission to access S3 bucket."
      },
      "AwsSecretKeyParam":
      {
        "Type": "String",
        "Description": "Enter AWS Secret Key with permission to access S3 bucket.",
        "NoEcho": true
      },
      "AviatrixUserParam":
      {
        "Type": "String",
        "Description": "Enter admin or an Aviatrix Cloud account username used for backup. This field in conjuction with password is used to login to the controller launched by autoscaling group and execute Aviatrix API to restore configuration file stored in S3."
      },
      "AviatrixPassParam":
      {
        "Type": "String",
        "Description": "Enter admin's Password or an Aviatrix Cloud account password used for backup. This field in conjuction with username is used to login to the controller launched by autoscaling group and execute Aviatrix API to restore configuration file stored in S3. ",
        "NoEcho": true
      }
  },
  "Resources" :
  {
    "AviatrixRoleLambda" :
    {
      "Type": "AWS::IAM::Role",
      "Properties" :
      {
        "RoleName": { "Fn::Join" : [ "-", [ { "Ref" : "AviatrixTagParam" }, "role-lambda" ] ] },
        "AssumeRolePolicyDocument":
        {
          "Version" : "2012-10-17",
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal":
              {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path" : "/",
        "Policies": [{
          "PolicyDocument" :
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": "arn:aws:logs:*:*:*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeInstances",
                        "ec2:DescribeAddresses",
                        "ec2:AssociateAddress",
                        "ec2:DescribeImages",
                        "ec2:DeregisterImage",
                        "ec2:DescribeSnapshots",
                        "ec2:DeleteSnapshot",
                        "ec2:CreateImage",
                        "lambda:UpdateFunctionConfiguration",
                        "lambda:GetFunction",
                        "lambda:AddPermission",
                        "autoscaling:CreateLaunchConfiguration",
                        "autoscaling:DeleteLaunchConfiguration",
                        "autoscaling:CreateAutoScalingGroup",
                        "autoscaling:DeleteAutoScalingGroup",
                        "autoscaling:AttachInstances",
                        "autoscaling:DetachInstances",
                        "autoscaling:PutNotificationConfiguration",
                        "autoscaling:DescribeAutoScalingGroups",
                        "autoscaling:UpdateAutoScalingGroup",
                        "sns:CreateTopic",
                        "sns:DeleteTopic",
                        "sns:Subscribe",
                        "ssm:SendCommand",
                        "ssm:ListCommandInvocations"
                    ],
                    "Resource": "*"
                }
            ]
          },
          "PolicyName": { "Fn::Join" : [ "-", [ { "Ref" : "AviatrixTagParam" }, "role-lambda-policy" ] ] }
        }]
      }
    },
    "AviatrixLambda" : {
       "Type" : "AWS::Lambda::Function",
       "Properties" : {
          "Code" : {"S3Bucket" : { "Ref" : "S3BucketParam" }, "S3Key" : "aviatrix_ha.zip"},
          "Environment" : {
            "Variables": { 
              "AVIATRIX_TAG" : { "Ref" : "AviatrixTagParam" },
              "SUBNETLIST" : {"Fn::Join": [",", { "Ref": "SubnetParam" }]},
              "S3_BUCKET_BACK" : { "Ref" : "S3BucketBackupParam" },
              "AWS_ACCESS_KEY_BACK" : { "Ref" : "AwsAccessKeyParam" },
              "AWS_SECRET_KEY_BACK" : { "Ref" : "AwsSecretKeyParam" },
              "AVIATRIX_USER_BACK" : { "Ref" : "AviatrixUserParam" },
              "AVIATRIX_PASS_BACK" : { "Ref" : "AviatrixPassParam" }
            }
          },
          "FunctionName" : { "Fn::Join" : [ "-", [ { "Ref" : "AviatrixTagParam" }, "ha" ] ] },
          "Handler" : "aviatrix_ha.lambda_handler",
          "Role" : {"Fn::GetAtt": [ "AviatrixRoleLambda", "Arn" ]},
          "Runtime" : "python2.7",
          "Timeout" : "300",
       }
    },
    "SetupHA": {
      "Type": "Custom::SetupHA",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["AviatrixLambda", "Arn"] }
      }
    }
  },
  "Outputs" :
  {
    "AccountId" :
    {
      "Description": "Amazon Account ID",
      "Value" : { "Ref" : "AWS::AccountId" }
    },
    "SUBNETLIST" :
    {
      "Description": "SUBNET_LIST",
      "Value" : {"Fn::Join": [",", { "Ref": "SubnetParam" }]}
    }

  }
}
