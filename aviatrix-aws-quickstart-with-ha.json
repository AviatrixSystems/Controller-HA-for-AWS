{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Aviatrix Systems - Creates the necessary policies, roles, security group and launches Aviatrix Controller instance",
  "Metadata" :
  {
    "AWS::CloudFormation::Interface" :
    {
      "ParameterGroups" :
      [
        {
          "Label" : { "default" : "Network Configuration" },
          "Parameters" : [ "VPCParam", "SubnetParam" ]
        },
        {
          "Label" : { "default":"Amazon EC2 Configuration" },
          "Parameters" : [ "KeyNameParam", "ElasticIpParam" ]
        }
      ],
      "ParameterLabels" :
      {
         "VPCParam" : { "default" : "Which VPC should the Aviatrix Controller be deployed to?" },
         "SubnetParam" : { "default" : "Which subnet within that VPC?" },
         "KeyNameParam" : { "default" : "Which keypair will be used?" },
         "ElasticIpParam" : { "default" : "Which Elastic IP will be used(for example 1.1.1.1)?" }
      }
    }
  },
  "Parameters":
  {
    "VPCParam":
      {
        "Type": "AWS::EC2::VPC::Id",
        "Description": "Select Your VPC"
      },
      "SubnetParam":
      {
        "Type": "List<AWS::EC2::Subnet::Id>",
        "Description": "Select Subnets"
      },
      "KeyNameParam":
      {
        "Type": "AWS::EC2::KeyPair::KeyName",
        "Description": "Select your Keypair"
      },
      "ElasticIpParam":
      {
        "Type": "String",
        "Description": "Enter your Elastic IP with VPC scope(for eg. 1.1.1.1)"
      }
  },
  "Mappings" :
  {
    "RegionMap" :
    {
      "us-east-1" : { "Name" : "ami-690c467e" },
      "us-east-2" : { "Name" : "ami-811248e4" },
      "us-west-1" : { "Name" : "ami-43206823" },
      "us-west-2" : { "Name" : "ami-03558e63" },
      "ca-central-1" : { "Name" : "ami-2dc57749" },
      "eu-central-1" : { "Name" : "ami-70c43a1f" },
      "eu-west-1" : { "Name" : "ami-33d69440" },
      "eu-west-2" : { "Name" : "ami-a1272dc5" },
      "ap-south-1" : { "Name" : "ami-970672f8" },
      "ap-northeast-1" : { "Name" : "ami-7308d212" },
      "ap-northeast-2" : { "Name" : "ami-93d400fd" },
      "ap-southeast-1" : { "Name" : "ami-f4258297" },
      "ap-southeast-2" : { "Name" : "ami-921624f1" },
      "sa-east-1" : { "Name" : "ami-bcf66bd0" }
    }
  },
  "Resources" :
  {
    "AviatrixRoleLambda" :
    {
      "Type": "AWS::IAM::Role",
      "Properties" :
      {
        "RoleName": "aviatrix-lambda-role",
        "AssumeRolePolicyDocument":
        {
          "Version" : "2012-10-17",
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal":
              {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path" : "/",
        "Policies": [{
          "PolicyDocument" :
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": "arn:aws:logs:*:*:*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeInstances",
                        "ec2:DescribeAddresses",
                        "ec2:AssociateAddress",
                        "ec2:DescribeImages",
                        "ec2:DeregisterImage",
                        "ec2:DescribeSnapshots",
                        "ec2:DeleteSnapshot",
                        "ec2:CreateImage",
                        "lambda:UpdateFunctionConfiguration",
                        "autoscaling:CreateLaunchConfiguration",
                        "autoscaling:DescribeAutoScalingGroups",
                        "autoscaling:UpdateAutoScalingGroup",
                        "autoscaling:DeleteLaunchConfiguration"
                    ],
                    "Resource": "*"
                }
            ]
          },
          "PolicyName": "AviatrixLambdaRolePolicy"
        }]
      }
    },
    "AviatrixRoleEC2" :
    {
      "Type": "AWS::IAM::Role",
      "Properties":
      {
        "RoleName": "aviatrix-role-ec2",
        "AssumeRolePolicyDocument":
        {
          "Version" : "2012-10-17",
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal":
              {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "AviatrixRoleApp" :
    {
      "Type": "AWS::IAM::Role",
      "Properties":
      {
        "RoleName": "aviatrix-role-app",
        "AssumeRolePolicyDocument":
        {
          "Version" : "2012-10-17",
          "Statement":
          [
            {
              "Effect": "Allow",
              "Principal":
              {
                  "AWS": [ { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" } , ":root" ] ] } ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "CreateAviatrixAssumeRolePolicy" :
    {
      "Type" : "AWS::IAM::ManagedPolicy",
      "Properties" :
      {
        "ManagedPolicyName" : "aviatrix-assume-role-policy",
        "Description" : "Policy for creating aviatrix-assume-role-policy",
        "Path" : "/",
        "PolicyDocument" :
        {
          "Version": "2012-10-17",
          "Statement":
          [
            {
              "Effect": "Allow",
              "Action":
              [
                "iam:UpdateAssumeRolePolicy",
                "sts:AssumeRole"
              ],
              "Resource": "arn:aws:iam::*"
            }
          ]
        },
        "Roles" :
        [ {
          "Ref": "AviatrixRoleEC2"
        } ]
      }
    },
    "CreateAviatrixAppPolicy" :
    {
       "Type" : "AWS::IAM::ManagedPolicy",
       "Properties" : {
         "ManagedPolicyName" : "aviatrix-app-policy",
         "Description" : "Policy for creating aviatrix-app-policy",
         "Path" : "/",
         "PolicyDocument" :
         {
           "Version": "2012-10-17",
           "Statement": [
               {
                   "Effect": "Allow",
                   "Action": [
                       "ec2:Describe*",
                       "elasticloadbalancing:Describe*",
                       "route53:List*",
                       "route53:Get*",
                       "sqs:Get*",
                       "sqs:List*",
                       "sns:List*",
                       "s3:List*",
                       "s3:Get*",
                       "iam:List*",
                       "iam:Get*"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "ec2:RunInstances"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": "ec2:RunInstances",
                   "Resource": "arn:aws:ec2:*:*:image/ami-*"
               },
               {
                   "Effect": "Allow",
                   "Action": "ec2:RunInstances",
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "ec2:DeleteSecurityGroup",
                       "ec2:RevokeSecurityGroupEgress",
                       "ec2:RevokeSecurityGroupIngress",
                       "ec2:AuthorizeSecurityGroup*",
                       "ec2:CreateSecurityGroup",
                       "ec2:AssociateRouteTable",
                       "ec2:CreateRoute",
                       "ec2:CreateRouteTable",
                       "ec2:DeleteRoute",
                       "ec2:DeleteRouteTable",
                       "ec2:DisassociateRouteTable",
                       "ec2:ReplaceRoute",
                       "ec2:ReplaceRouteTableAssociation"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "ec2:AllocateAddress",
                       "ec2:AssociateAddress",
                       "ec2:DisassociateAddress",
                       "ec2:ReleaseAddress",
                       "ec2:AssignPrivateIpAddresses",
                       "ec2:AttachNetworkInterface",
                       "ec2:CreateNetworkInterface",
                       "ec2:DeleteNetworkInterface",
                       "ec2:DetachNetworkInterface",
                       "ec2:ModifyNetworkInterfaceAttribute",
                       "ec2:ResetNetworkInterfaceAttribute",
                       "ec2:UnassignPrivateIpAddresses",
                       "ec2:ModifyInstanceAttribute",
                       "ec2:MonitorInstances",
                       "ec2:RebootInstances",
                       "ec2:ReportInstanceStatus",
                       "ec2:ResetInstanceAttribute",
                       "ec2:StartInstances",
                       "ec2:StopInstances",
                       "ec2:TerminateInstances",
                       "ec2:UnmonitorInstances",
                       "ec2:AttachInternetGateway",
                       "ec2:CreateInternetGateway",
                       "ec2:DeleteInternetGateway",
                       "ec2:DetachInternetGateway",
                       "ec2:CreateKeyPair",
                       "ec2:DeleteKeyPair",
                       "ec2:CreateSubnet",
                       "ec2:DeleteSubnet",
                       "ec2:ModifySubnetAttribute",
                       "ec2:CreateTags",
                       "ec2:DeleteTags",
                       "ec2:CreateVpc",
                       "ec2:DeleteVpc",
                       "ec2:ModifyVpcAttribute"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                       "elasticloadbalancing:AttachLoadBalancerToSubnets",
                       "elasticloadbalancing:ConfigureHealthCheck",
                       "elasticloadbalancing:CreateLoadBalancer*",
                       "elasticloadbalancing:DeleteLoadBalancer*",
                       "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                       "elasticloadbalancing:ModifyLoadBalancerAttributes",
                       "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                       "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "route53:ChangeResourceRecordSets",
                       "route53:CreateHostedZone",
                       "route53:DeleteHostedZone"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "s3:CreateBucket",
                       "s3:DeleteBucket",
                       "s3:PutObject"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "cloudwatch:DeleteAlarms",
                       "cloudwatch:PutMetricAlarm"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "sns:CreateTopic",
                       "sns:DeleteTopic",
                       "sns:Subscribe",
                       "sns:Unsubscribe"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "sqs:AddPermission",
                       "sqs:ChangeMessageVisibility",
                       "sqs:CreateQueue",
                       "sqs:DeleteMessage",
                       "sqs:DeleteQueue",
                       "sqs:PurgeQueue",
                       "sqs:ReceiveMessage",
                       "sqs:RemovePermission",
                       "sqs:SendMessage",
                       "sqs:SetQueueAttributes"
                   ],
                   "Resource": "*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "iam:UpdateAssumeRolePolicy",
                       "sts:AssumeRole"
                   ],
                   "Resource": "arn:aws:iam::*"
               },
               {
                   "Effect": "Allow",
                   "Action": [
                       "iam:UpdateAssumeRolePolicy",
                       "iam:PassRole",
                       "iam:AddRoleToInstanceProfile",
                       "iam:CreateInstanceProfile",
                       "iam:DeleteInstanceProfile",
                       "iam:RemoveRoleFromInstanceProfile"
                   ],
                   "Resource": "*"
               }
           ]
         },
         "Roles" : [ {
            "Ref": "AviatrixRoleApp"
         } ]
       }
    },
    "AviatrixInstanceProfile":
    {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties":
      {
        "Path": "/",
        "Roles": [ { "Ref": "AviatrixRoleEC2" } ]
      }
    },
    "AviatrixLaunchConf" :
    {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" :
      {
        "AssociatePublicIpAddress" : "true",
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Name" ]},
        "KeyName" : { "Ref": "KeyNameParam" },
        "InstanceType": "t2.large",
        "IamInstanceProfile" : {"Ref":  "AviatrixInstanceProfile" },
        "SecurityGroups" : [ { "Ref" : "AviatrixSG" } ]
      }
    },
    "AviatrixASG" :
    {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref" : "AviatrixLaunchConf" },
        "MinSize" : "0",
        "MaxSize" : "1",
        "DesiredCapacity" : "1",
        "NotificationConfigurations" : [
          {
            "TopicARN" : { "Ref" : "AviatrixSNS" },
            "NotificationTypes" : [
              "autoscaling:EC2_INSTANCE_LAUNCH"
            ]
          }
        ],
        "VPCZoneIdentifier" : { "Fn::Split" : [ "," , {"Fn::Join": [",", { "Ref": "SubnetParam" }]} ] },
        "Tags" : [ {"Key" : "Name","Value" : "AviatrixController","PropagateAtLaunch" : "true"} ]
      }
    },
    "AviatrixSNS" : {
       "Type" : "AWS::SNS::Topic",
       "Properties" : {
          "Subscription" : [
             { "Endpoint" : { "Fn::GetAtt": [ "AviatrixLambda", "Arn" ] }, "Protocol" : "lambda" }
          ],
          "TopicName" : "AviatrixSNS"
       }
    },
    "AviatrixLambda" : {
       "Type" : "AWS::Lambda::Function",
       "Properties" : {
          "Code" : {"S3Bucket" : "aviatrix-lambda", "S3Key" : "aviatrix_ha.zip"},
          "Environment" : {
            "Variables": { 
              "EIP" : { "Ref" : "ElasticIpParam" }
            }
          },
          "FunctionName" : "enable_ha",
          "Handler" : "aviatrix_ha.lambda_handler",
          "Role" : {"Fn::GetAtt": [ "AviatrixRoleLambda", "Arn" ]},
          "Runtime" : "python2.7",
          "Timeout" : "60",
       }
    },
    "AviatrixLambdaScheduleRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "rate(12 hours)",
        "Targets": [
          {
            "Id": "AviatrixLambdaScheduler",
            "Arn": {
              "Fn::GetAtt": [
                "AviatrixLambda",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "InvokeLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AviatrixLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "AviatrixLambdaScheduleRule",
            "Arn"
          ]
        }
      }
    },
    "LambdaSNSPermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "Principal": "sns.amazonaws.com",
          "SourceArn": { "Ref": "AviatrixSNS" },
          "FunctionName": { "Fn::GetAtt": [ "AviatrixLambda", "Arn" ] }
        }
      },
    "AviatrixSG":
    {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties":
      {
        "GroupDescription": "Aviatrix - Allow HTTPS to Controller",
        "VpcId": { "Ref": "VPCParam" },
        "SecurityGroupIngress":
        [ {
          "IpProtocol": "tcp",
          "CidrIp": "0.0.0.0/0",
          "FromPort": "443",
          "ToPort": "443"
        } ],
        "Tags":
        [
          {
            "Key": "Name",
            "Value": "AviatrixSecurityGroup"
          },
          {
            "Key": "Project",
            "Value": "Aviatrix"
          }
          ]
      }
    },
    "AssignEIP": {
      "Type": "Custom::AssignEIP",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["AviatrixLambda", "Arn"] },
        "ASG_NAME": { "Ref": "AviatrixASG" }
      }
    }
  },
  "Outputs" :
  {
    "AccountId" :
    {
      "Description": "Amazon Account ID",
      "Value" : { "Ref" : "AWS::AccountId" }
    },
    "AviatrixRoleAppARN" :
    {
      "Description": "AviatrixRoleApp ARN",
      "Value" : { "Fn::GetAtt" : [ "AviatrixRoleApp" , "Arn" ] }
    },
    "AviatrixRoleEC2ARN" :
    {
      "Description": "AviatrixRoleEC2 ARN",
      "Value" : { "Fn::GetAtt" : [ "AviatrixRoleEC2" , "Arn" ] }
    },
  }
}
